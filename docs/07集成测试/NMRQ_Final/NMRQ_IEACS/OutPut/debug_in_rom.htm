<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\OutPut\debug_in_rom.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\OutPut\debug_in_rom.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 481]: Last Updated: Fri Aug 09 09:32:54 2013
<BR><P>
<H3>Maximum Stack Usage =        160 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TASK_PC_Parse &rArr; TASK_DisplayMain &rArr; LCD_UpdateDate &rArr; LCD_PutNumberOnData &rArr; LCD_Locatexy &rArr; LCD_WriteData
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[16]">Reset</a>
 <LI><a href="#[18]">__user_initial_stackheap</a>
 <LI><a href="#[12]">IRQ_Handler</a>
 <LI><a href="#[13]">Timer0_Handler</a>
 <LI><a href="#[b]">SoftwareInterrupt</a>
 <LI><a href="#[14]">OSIntCtxSw</a>
 <LI><a href="#[15]">__OSStartHighRdy</a>
 <LI><a href="#[a]">Undefined</a>
 <LI><a href="#[c]">PrefetchAbort</a>
 <LI><a href="#[d]">DataAbort</a>
 <LI><a href="#[e]">FIQ_Handler</a>
 <LI><a href="#[9]">ResetInit</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">Undefined</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">Undefined</a><BR>
 <LI><a href="#[c]">PrefetchAbort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PrefetchAbort</a><BR>
 <LI><a href="#[d]">DataAbort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">DataAbort</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[9]">ResetInit</a> from startup.o(vectors) referenced from startup.o(vectors)
 <LI><a href="#[a]">Undefined</a> from startup.o(vectors) referenced from startup.o(vectors)
 <LI><a href="#[b]">SoftwareInterrupt</a> from os_cpu_a.o(subr) referenced from startup.o(vectors)
 <LI><a href="#[c]">PrefetchAbort</a> from startup.o(vectors) referenced from startup.o(vectors)
 <LI><a href="#[d]">DataAbort</a> from startup.o(vectors) referenced from startup.o(vectors)
 <LI><a href="#[e]">FIQ_Handler</a> from startup.o(vectors) referenced from startup.o(vectors)
 <LI><a href="#[f]">main</a> from main.o(.text) referenced from rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[10]">TASK_Start</a> from nmrq_task.o(.text) referenced from main.o(.text)
 <LI><a href="#[11]">TASK_PC_Parse</a> from nmrq_task.o(.text) referenced from nmrq_task.o(.text)
 <LI><a href="#[12]">IRQ_Handler</a> from irq.o(IRQ) referenced from target.o(.text)
 <LI><a href="#[13]">Timer0_Handler</a> from irq.o(IRQ) referenced from target.o(.text)
 <LI><a href="#[14]">OSIntCtxSw</a> from os_cpu_a.o(subr) referenced from irq.o(IRQ)
 <LI><a href="#[14]">OSIntCtxSw</a> from os_cpu_a.o(subr) referenced from os_cpu_a.o(subr)
 <LI><a href="#[15]">__OSStartHighRdy</a> from os_cpu_a.o(subr) referenced from os_cpu_a.o(subr)
 <LI><a href="#[2e]">OS_TaskIdle</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[53]">TargetInit</a> from target.o(.text) referenced from target.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[16]"></a>Reset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors))

<P><STRONG><a name="[18]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[17]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetInit
</UL>

<P><STRONG><a name="[1b]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1d]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c5]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1e]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[c6]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1f]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[21]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[c7]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[23]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[c8]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[c9]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[d6]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[d7]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[d8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[d9]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[da]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[db]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[dc]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[dd]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[de]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[df]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[1c]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[e0]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[25]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[27]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[e1]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[28]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[e2]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[b9]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[2a]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[e3]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2c]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[44]"></a>OSTaskStkInit</STRONG> (ARM, 232 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[e4]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[c2]"></a>SWI_Exception</STRONG> (ARM, 344 bytes, Stack size 4 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SWI_Exception
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareInterrupt
</UL>

<P><STRONG><a name="[3c]"></a>OSStartHighRdy</STRONG> (ARM, 16 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[33]"></a>OSInitHookBegin</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[38]"></a>OSInitHookEnd</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[41]"></a>OSTaskCreateHook</STRONG> (ARM, 8 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[48]"></a>OSTaskDelHook</STRONG> (ARM, 8 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[c3]"></a>OSTaskSwHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__OSStartHighRdy
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
</UL>

<P><STRONG><a name="[e5]"></a>OSTaskStatHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>OSTCBInitHook</STRONG> (ARM, 8 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[3e]"></a>OSTimeTickHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[2f]"></a>OSTaskIdleHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[2e]"></a>OS_TaskIdle</STRONG> (ARM, 44 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[32]"></a>OSInit</STRONG> (ARM, 40 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>OSIntEnter</STRONG> (ARM, 56 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>OSIntExit</STRONG> (ARM, 256 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSIntExit
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Handler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[e7]"></a>OSSchedLock</STRONG> (ARM, 72 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>OS_Sched</STRONG> (ARM, 168 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>

<P><STRONG><a name="[39]"></a>OSSchedUnlock</STRONG> (ARM, 124 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[3b]"></a>OSStart</STRONG> (ARM, 132 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSStart &rArr; OSStartHighRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>OSTimeTick</STRONG> (ARM, 212 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Exception
</UL>

<P><STRONG><a name="[e8]"></a>OSVersion</STRONG> (ARM, 8 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>OS_Dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[e9]"></a>OS_EventTaskRdy</STRONG> (ARM, 196 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>OS_EventTaskWait</STRONG> (ARM, 188 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>OS_EventTO</STRONG> (ARM, 116 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>OS_EventWaitListInit</STRONG> (ARM, 52 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>OS_TCBInit</STRONG> (ARM, 336 bytes, Stack size 40 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[42]"></a>OSTaskChangePrio</STRONG> (ARM, 460 bytes, Stack size 40 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[43]"></a>OSTaskCreate</STRONG> (ARM, 236 bytes, Stack size 40 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Start
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>OSTaskCreateExt</STRONG> (ARM, 284 bytes, Stack size 72 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[46]"></a>OSTaskDel</STRONG> (ARM, 492 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
</UL>

<P><STRONG><a name="[ed]"></a>OSTaskDelReq</STRONG> (ARM, 140 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>OSTaskResume</STRONG> (ARM, 192 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_PcDec
</UL>

<P><STRONG><a name="[ee]"></a>OSTaskStkChk</STRONG> (ARM, 192 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>OSTaskSuspend</STRONG> (ARM, 240 bytes, Stack size 16 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_PC_Parse
</UL>

<P><STRONG><a name="[4b]"></a>OSTaskQuery</STRONG> (ARM, 120 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[4d]"></a>OSTimeDly</STRONG> (ARM, 140 bytes, Stack size 8 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_KeyDec
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_PcDec
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_PC_Parse
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Start
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>

<P><STRONG><a name="[4e]"></a>OSTimeDlyHMSM</STRONG> (ARM, 232 bytes, Stack size 32 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[50]"></a>OSTimeDlyResume</STRONG> (ARM, 184 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[ef]"></a>OSTimeGet</STRONG> (ARM, 32 bytes, Stack size 8 bytes, os_time.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>OSTimeSet</STRONG> (ARM, 32 bytes, Stack size 8 bytes, os_time.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>delay_us</STRONG> (ARM, 48 bytes, Stack size 0 bytes, helper.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>delay_ms</STRONG> (ARM, 52 bytes, Stack size 0 bytes, helper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[9c]"></a>delay_ns</STRONG> (ARM, 28 bytes, Stack size 0 bytes, helper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
</UL>

<P><STRONG><a name="[51]"></a>myitoa</STRONG> (ARM, 124 bytes, Stack size 24 bytes, helper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[f]"></a>main</STRONG> (ARM, 52 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = main &rArr; OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[56]"></a>KEY_DelayNS</STRONG> (ARM, 56 bytes, Stack size 0 bytes, nmrq_key.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_IfClicked
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Beep
</UL>

<P><STRONG><a name="[55]"></a>KEY_Beep</STRONG> (ARM, 116 bytes, Stack size 4 bytes, nmrq_key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_DelayNS
</UL>

<P><STRONG><a name="[57]"></a>KEY_IfClicked</STRONG> (ARM, 796 bytes, Stack size 4 bytes, nmrq_key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_DelayNS
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HI_IfKeyClicked
</UL>

<P><STRONG><a name="[6f]"></a>KEY_SendKeyValue_whichKey</STRONG> (ARM, 12 bytes, Stack size 0 bytes, nmrq_key.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HI_GetKeyValue_whichKey
</UL>

<P><STRONG><a name="[71]"></a>KEY_SendKeyValue_LongOrShort</STRONG> (ARM, 12 bytes, Stack size 0 bytes, nmrq_key.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HI_GetKeyValue_LongOrShort
</UL>

<P><STRONG><a name="[5f]"></a>EAC_OpenDoorLight</STRONG> (ARM, 88 bytes, Stack size 0 bytes, nmrq_eac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetFeedbackMsg
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetLightInfo
</UL>

<P><STRONG><a name="[60]"></a>EAC_CloseDoorLight</STRONG> (ARM, 88 bytes, Stack size 0 bytes, nmrq_eac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetFeedbackMsg
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GasLeak
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetLightInfo
</UL>

<P><STRONG><a name="[5b]"></a>EAC_OpenAirCondition</STRONG> (ARM, 88 bytes, Stack size 0 bytes, nmrq_eac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetFeedbackMsg
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetTemperatureInfo
</UL>

<P><STRONG><a name="[5d]"></a>EAC_CloseAirCondition</STRONG> (ARM, 88 bytes, Stack size 0 bytes, nmrq_eac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetFeedbackMsg
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GasLeak
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetTemperatureInfo
</UL>

<P><STRONG><a name="[5c]"></a>EAC_SetAirCond_Temp</STRONG> (ARM, 44 bytes, Stack size 0 bytes, nmrq_eac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetFeedbackMsg2
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetTemperatureInfo
</UL>

<P><STRONG><a name="[66]"></a>EAC_OpenWaterheater</STRONG> (ARM, 88 bytes, Stack size 0 bytes, nmrq_eac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetFeedbackMsg
</UL>

<P><STRONG><a name="[64]"></a>EAC_CloseWaterheater</STRONG> (ARM, 88 bytes, Stack size 0 bytes, nmrq_eac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetFeedbackMsg
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GasLeak
</UL>

<P><STRONG><a name="[68]"></a>EAC_SetWaterheater_Temp</STRONG> (ARM, 44 bytes, Stack size 0 bytes, nmrq_eac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetFeedbackMsg2
</UL>

<P><STRONG><a name="[59]"></a>EAC_DelayNS</STRONG> (ARM, 52 bytes, Stack size 0 bytes, nmrq_eac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_BeepAndBell
</UL>

<P><STRONG><a name="[58]"></a>EAC_BeepAndBell</STRONG> (ARM, 240 bytes, Stack size 4 bytes, nmrq_eac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EAC_BeepAndBell
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_DelayNS
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GasLeak
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_ThiefFound
</UL>

<P><STRONG><a name="[5a]"></a>EAC_GetTemperatureInfo</STRONG> (ARM, 240 bytes, Stack size 16 bytes, nmrq_eac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = EAC_GetTemperatureInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_SetAirCond_Temp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_CloseAirCondition
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_OpenAirCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_SwapTempAndLight
</UL>

<P><STRONG><a name="[5e]"></a>EAC_GetLightInfo</STRONG> (ARM, 204 bytes, Stack size 16 bytes, nmrq_eac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = EAC_GetLightInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_CloseDoorLight
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_OpenDoorLight
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_SwapTempAndLight
</UL>

<P><STRONG><a name="[61]"></a>EAC_SwapTempAndLight</STRONG> (ARM, 68 bytes, Stack size 8 bytes, nmrq_eac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = EAC_SwapTempAndLight &rArr; EAC_GetLightInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetLightInfo
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetTemperatureInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetFeedbackMsg
</UL>

<P><STRONG><a name="[62]"></a>EAC_ThiefFound</STRONG> (ARM, 24 bytes, Stack size 4 bytes, nmrq_eac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EAC_ThiefFound &rArr; EAC_BeepAndBell
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_BeepAndBell
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetFeedbackMsg
</UL>

<P><STRONG><a name="[63]"></a>EAC_GasLeak</STRONG> (ARM, 88 bytes, Stack size 8 bytes, nmrq_eac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EAC_GasLeak &rArr; EAC_BeepAndBell
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_BeepAndBell
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_CloseWaterheater
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_CloseAirCondition
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_CloseDoorLight
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetFeedbackMsg
</UL>

<P><STRONG><a name="[65]"></a>EAC_GetFeedbackMsg</STRONG> (ARM, 408 bytes, Stack size 8 bytes, nmrq_eac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = EAC_GetFeedbackMsg &rArr; EAC_SwapTempAndLight &rArr; EAC_GetLightInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GasLeak
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_ThiefFound
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_SwapTempAndLight
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_CloseWaterheater
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_OpenWaterheater
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_CloseAirCondition
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_OpenAirCondition
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_CloseDoorLight
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_OpenDoorLight
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_SendFeedbackMsg
</UL>

<P><STRONG><a name="[67]"></a>EAC_GetFeedbackMsg2</STRONG> (ARM, 120 bytes, Stack size 8 bytes, nmrq_eac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EAC_GetFeedbackMsg2
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_SetWaterheater_Temp
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_SetAirCond_Temp
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_SendFeedbackMsg2
</UL>

<P><STRONG><a name="[69]"></a>EAC_SendFeedbackMsg</STRONG> (ARM, 24 bytes, Stack size 8 bytes, nmrq_eac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = EAC_SendFeedbackMsg &rArr; EAC_GetFeedbackMsg &rArr; EAC_SwapTempAndLight &rArr; EAC_GetLightInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetFeedbackMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HI_SwapTempAndLight
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HI_Control
</UL>

<P><STRONG><a name="[6a]"></a>EAC_SendFeedbackMsg2</STRONG> (ARM, 32 bytes, Stack size 12 bytes, nmrq_eac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EAC_SendFeedbackMsg2 &rArr; EAC_GetFeedbackMsg2
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetFeedbackMsg2
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HI_Control
</UL>

<P><STRONG><a name="[6b]"></a>HI_Control</STRONG> (ARM, 364 bytes, Stack size 24 bytes, nmrq_hi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = HI_Control &rArr; EAC_SendFeedbackMsg &rArr; EAC_GetFeedbackMsg &rArr; EAC_SwapTempAndLight &rArr; EAC_GetLightInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_SendFeedbackMsg2
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_SendFeedbackMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_KeyParse
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_PC_Parse
</UL>

<P><STRONG><a name="[6c]"></a>HI_SwapTempAndLight</STRONG> (ARM, 20 bytes, Stack size 8 bytes, nmrq_hi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_SendFeedbackMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_KeyParse
</UL>

<P><STRONG><a name="[f2]"></a>HI_PageSwitch</STRONG> (ARM, 4 bytes, Stack size 0 bytes, nmrq_hi.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>HI_ErrorDisplay</STRONG> (ARM, 4 bytes, Stack size 0 bytes, nmrq_hi.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>HI_IfKeyClicked</STRONG> (ARM, 16 bytes, Stack size 8 bytes, nmrq_hi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_IfClicked
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_KeyDec
</UL>

<P><STRONG><a name="[6e]"></a>HI_GetKeyValue_whichKey</STRONG> (ARM, 16 bytes, Stack size 8 bytes, nmrq_hi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SendKeyValue_whichKey
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_KeyDec
</UL>

<P><STRONG><a name="[70]"></a>HI_GetKeyValue_LongOrShort</STRONG> (ARM, 16 bytes, Stack size 8 bytes, nmrq_hi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SendKeyValue_LongOrShort
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_KeyDec
</UL>

<P><STRONG><a name="[73]"></a>COM_SendByteDown</STRONG> (ARM, 32 bytes, Stack size 0 bytes, nmrq_com.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendDataDown
</UL>

<P><STRONG><a name="[72]"></a>COM_SendDataDown</STRONG> (ARM, 52 bytes, Stack size 4 bytes, nmrq_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = COM_SendDataDown
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendByteDown
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_KeyParse
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_PC_Parse
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_SendStatTbl
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_SendTimingTbl
</UL>

<P><STRONG><a name="[f4]"></a>COM_RecvDataDown</STRONG> (ARM, 32 bytes, Stack size 0 bytes, nmrq_com.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>COM_PllPvbInit</STRONG> (ARM, 88 bytes, Stack size 0 bytes, nmrq_com.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_InitDown
</UL>

<P><STRONG><a name="[76]"></a>COM_PortInit</STRONG> (ARM, 164 bytes, Stack size 0 bytes, nmrq_com.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_InitDown
</UL>

<P><STRONG><a name="[74]"></a>COM_InitDown</STRONG> (ARM, 20 bytes, Stack size 4 bytes, nmrq_com.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_PortInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_PllPvbInit
</UL>

<P><STRONG><a name="[78]"></a>TASK_CharToNum</STRONG> (ARM, 380 bytes, Stack size 0 bytes, nmrq_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_KeyParse
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_PC_Parse
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_SendStatTbl
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_SendTimingTbl
</UL>

<P><STRONG><a name="[77]"></a>TASK_SendTimingTbl</STRONG> (ARM, 392 bytes, Stack size 80 bytes, nmrq_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TASK_SendTimingTbl &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_CharToNum
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendDataDown
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_PC_Parse
</UL>

<P><STRONG><a name="[7a]"></a>DelayNS</STRONG> (ARM, 44 bytes, Stack size 0 bytes, nmrq_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepCount
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_SendStatTbl
</UL>

<P><STRONG><a name="[79]"></a>TASK_SendStatTbl</STRONG> (ARM, 944 bytes, Stack size 144 bytes, nmrq_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TASK_SendStatTbl &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNS
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_CharToNum
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendDataDown
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_PC_Parse
</UL>

<P><STRONG><a name="[83]"></a>TASK_GetRTCTimeDay</STRONG> (ARM, 20 bytes, Stack size 0 bytes, nmrq_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_DisplayMain
</UL>

<P><STRONG><a name="[84]"></a>TASK_GetRTCTimeMonth</STRONG> (ARM, 24 bytes, Stack size 0 bytes, nmrq_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_DisplayMain
</UL>

<P><STRONG><a name="[85]"></a>TASK_GetRTCTimeYear</STRONG> (ARM, 24 bytes, Stack size 0 bytes, nmrq_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_DisplayMain
</UL>

<P><STRONG><a name="[81]"></a>TASK_GetRTCTimeWeek</STRONG> (ARM, 24 bytes, Stack size 0 bytes, nmrq_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_DisplayMain
</UL>

<P><STRONG><a name="[7e]"></a>TASK_GetRTCTimeMin</STRONG> (ARM, 24 bytes, Stack size 0 bytes, nmrq_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_DisplayMain
</UL>

<P><STRONG><a name="[7f]"></a>TASK_GetRTCTimeHour</STRONG> (ARM, 24 bytes, Stack size 0 bytes, nmrq_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_DisplayMain
</UL>

<P><STRONG><a name="[7b]"></a>TASK_DisplayMain</STRONG> (ARM, 492 bytes, Stack size 56 bytes, nmrq_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TASK_DisplayMain &rArr; LCD_UpdateDate &rArr; LCD_PutNumberOnData &rArr; LCD_Locatexy &rArr; LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateWeek
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateTime
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateDate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateConnect
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateCircumstance
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateApplianceState
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMainScreen
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GetRTCTimeHour
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GetRTCTimeMin
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GetRTCTimeWeek
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GetRTCTimeYear
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GetRTCTimeMonth
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GetRTCTimeDay
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_KeyParse
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_PC_Parse
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Start
</UL>

<P><STRONG><a name="[11]"></a>TASK_PC_Parse</STRONG> (ARM, 1588 bytes, Stack size 0 bytes, nmrq_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = TASK_PC_Parse &rArr; TASK_DisplayMain &rArr; LCD_UpdateDate &rArr; LCD_PutNumberOnData &rArr; LCD_Locatexy &rArr; LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateApplianceState
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART0
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_DisplayMain
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_SendStatTbl
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_SendTimingTbl
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_CharToNum
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendDataDown
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HI_Control
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nmrq_task.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>TASK_PcDec</STRONG> (ARM, 100 bytes, Stack size 0 bytes, nmrq_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART0
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>

<P><STRONG><a name="[8b]"></a>TASK_DisplaySelectSet</STRONG> (ARM, 16 bytes, Stack size 8 bytes, nmrq_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMenuSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_KeyParse
</UL>

<P><STRONG><a name="[8d]"></a>TASK_KeyParse</STRONG> (ARM, 1692 bytes, Stack size 56 bytes, nmrq_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateCircumstance
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateApplianceState
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectMenuSetItem
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayModeSelect
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_DisplaySelectSet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_DisplayMain
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_CharToNum
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SendDataDown
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HI_SwapTempAndLight
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HI_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_KeyDec
</UL>

<P><STRONG><a name="[90]"></a>BeepCount</STRONG> (ARM, 92 bytes, Stack size 4 bytes, nmrq_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNS
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_KeyDec
</UL>

<P><STRONG><a name="[91]"></a>TASK_KeyDec</STRONG> (ARM, 116 bytes, Stack size 0 bytes, nmrq_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepCount
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_KeyParse
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HI_GetKeyValue_LongOrShort
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HI_GetKeyValue_whichKey
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HI_IfKeyClicked
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[95]"></a>TASK_TimingTblInit</STRONG> (ARM, 136 bytes, Stack size 0 bytes, nmrq_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Init
</UL>

<P><STRONG><a name="[94]"></a>TASK_OSStateInfoInit</STRONG> (ARM, 200 bytes, Stack size 0 bytes, nmrq_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Init
</UL>

<P><STRONG><a name="[93]"></a>TASK_RTCInit</STRONG> (ARM, 100 bytes, Stack size 0 bytes, nmrq_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Init
</UL>

<P><STRONG><a name="[92]"></a>TASK_Init</STRONG> (ARM, 188 bytes, Stack size 8 bytes, nmrq_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TASK_Init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_RTCInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_OSStateInfoInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_TimingTblInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Start
</UL>

<P><STRONG><a name="[10]"></a>TASK_Start</STRONG> (ARM, 100 bytes, Stack size 0 bytes, nmrq_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TASK_Start &rArr; TASK_DisplayMain &rArr; LCD_UpdateDate &rArr; LCD_PutNumberOnData &rArr; LCD_Locatexy &rArr; LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_DisplayMain
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[f5]"></a>TASK_GetRTCTimeSec</STRONG> (ARM, 20 bytes, Stack size 0 bytes, nmrq_task.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>IRQ_Exception</STRONG> (ARM, 8 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[19]"></a>FIQ_Exception</STRONG> (ARM, 8 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>

<P><STRONG><a name="[97]"></a>Timer0_Exception</STRONG> (ARM, 36 bytes, Stack size 8 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timer0_Exception &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Handler
</UL>

<P><STRONG><a name="[9a]"></a>Timer0Init</STRONG> (ARM, 40 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
</UL>

<P><STRONG><a name="[99]"></a>VICInit</STRONG> (ARM, 48 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit
</UL>

<P><STRONG><a name="[53]"></a>TargetInit</STRONG> (ARM, 36 bytes, Stack size 8 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TargetInit &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand (via Veneer)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VICInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>InitialiseUART0</STRONG> (ARM, 144 bytes, Stack size 16 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = InitialiseUART0
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_PcDec
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_PC_Parse
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>

<P><STRONG><a name="[1a]"></a>TargetResetInit</STRONG> (ARM, 260 bytes, Stack size 8 bytes, target.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = TargetResetInit &rArr; InitialiseUART0
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART0
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetInit
</UL>

<P><STRONG><a name="[f6]"></a>__rt_div0</STRONG> (ARM, 16 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>fputc</STRONG> (ARM, 20 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>fgetc</STRONG> (ARM, 16 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>_sys_close</STRONG> (ARM, 16 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>_sys_write</STRONG> (ARM, 28 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>_sys_read</STRONG> (ARM, 28 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>_ttywrch</STRONG> (ARM, 8 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display (via Veneer)
</UL>

<P><STRONG><a name="[fc]"></a>_sys_istty</STRONG> (ARM, 16 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>_sys_seek</STRONG> (ARM, 16 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>_sys_ensure</STRONG> (ARM, 16 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>_sys_flen</STRONG> (ARM, 16 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>_sys_tmpnam</STRONG> (ARM, 24 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>_sys_exit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, target.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit (via Veneer)
</UL>

<P><STRONG><a name="[101]"></a>_sys_command_string</STRONG> (ARM, 20 bytes, Stack size 0 bytes, target.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>LCD_Init</STRONG> (ARM, 56 bytes, Stack size 0 bytes, nmrq_lcd240160.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>LCD_WriteCommand</STRONG> (ARM, 128 bytes, Stack size 16 bytes, nmrq_lcd240160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WriteCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ns
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutNumberOnDataf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutNumberOnData
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutWeek
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutNumberOnMS
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Displaybmpf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Displaybmp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Displayemptybmp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Locatexy
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[9d]"></a>LCD_WriteData</STRONG> (ARM, 128 bytes, Stack size 16 bytes, nmrq_lcd240160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ns
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutNumberOnDataf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutNumberOnData
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutWeek
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutNumberOnMS
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Displaybmpf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Displaybmp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Displayemptybmp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Locatexy
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[9e]"></a>LCD_Clear</STRONG> (ARM, 356 bytes, Stack size 8 bytes, nmrq_lcd240160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_Clear &rArr; LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPowerOffSelect
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayTimeSet
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayModeSelect
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMenuSet
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMainScreen
</UL>

<P><STRONG><a name="[a0]"></a>LCD_Locatexy</STRONG> (ARM, 56 bytes, Stack size 16 bytes, nmrq_lcd240160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Locatexy &rArr; LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutNumberOnDataf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutNumberOnData
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutWeek
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutNumberOnMS
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Displaybmpf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Displaybmp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Displayemptybmp
</UL>

<P><STRONG><a name="[a1]"></a>LCD_Displayemptybmp</STRONG> (ARM, 296 bytes, Stack size 40 bytes, nmrq_lcd240160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_Displayemptybmp &rArr; LCD_Locatexy &rArr; LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Locatexy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateConnect
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateApplianceState
</UL>

<P><STRONG><a name="[a2]"></a>LCD_Displaybmp</STRONG> (ARM, 312 bytes, Stack size 48 bytes, nmrq_lcd240160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_Displaybmp &rArr; LCD_Locatexy &rArr; LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Locatexy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPowerOffSelect
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayTimeSet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateConnect
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateApplianceState
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectMenuSetItem
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayModeSelect
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMenuSet
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayMainScreen
</UL>

<P><STRONG><a name="[a3]"></a>LCD_Displaybmpf</STRONG> (ARM, 328 bytes, Stack size 48 bytes, nmrq_lcd240160.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Locatexy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectMenuSetItem
</UL>

<P><STRONG><a name="[a4]"></a>LCD_PutNumberOnMS</STRONG> (ARM, 132 bytes, Stack size 32 bytes, nmrq_lcd240160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_PutNumberOnMS &rArr; LCD_Locatexy &rArr; LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Locatexy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateTime
</UL>

<P><STRONG><a name="[a5]"></a>LCD_PutWeek</STRONG> (ARM, 132 bytes, Stack size 32 bytes, nmrq_lcd240160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_PutWeek &rArr; LCD_Locatexy &rArr; LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Locatexy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateWeek
</UL>

<P><STRONG><a name="[a6]"></a>LCD_PutNumberOnData</STRONG> (ARM, 132 bytes, Stack size 32 bytes, nmrq_lcd240160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_PutNumberOnData &rArr; LCD_Locatexy &rArr; LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Locatexy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateClockSetTime
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateClockSetDate
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateDate
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateCircumstance
</UL>

<P><STRONG><a name="[a7]"></a>LCD_PutNumberOnDataf</STRONG> (ARM, 140 bytes, Stack size 32 bytes, nmrq_lcd240160.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Locatexy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCommand
</UL>

<P><STRONG><a name="[7c]"></a>LCD_DisplayMainScreen</STRONG> (ARM, 468 bytes, Stack size 8 bytes, nmrq_lcd240160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_DisplayMainScreen &rArr; LCD_Displaybmp &rArr; LCD_Locatexy &rArr; LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Displaybmp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_DisplayMain
</UL>

<P><STRONG><a name="[88]"></a>LCD_UpdateApplianceState</STRONG> (ARM, 352 bytes, Stack size 24 bytes, nmrq_lcd240160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_UpdateApplianceState &rArr; LCD_Displaybmp &rArr; LCD_Locatexy &rArr; LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Displaybmp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Displayemptybmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_KeyParse
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_PC_Parse
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_DisplayMain
</UL>

<P><STRONG><a name="[7d]"></a>LCD_UpdateConnect</STRONG> (ARM, 136 bytes, Stack size 16 bytes, nmrq_lcd240160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_UpdateConnect &rArr; LCD_Displaybmp &rArr; LCD_Locatexy &rArr; LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Displaybmp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Displayemptybmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_DisplayMain
</UL>

<P><STRONG><a name="[80]"></a>LCD_UpdateTime</STRONG> (ARM, 96 bytes, Stack size 24 bytes, nmrq_lcd240160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_UpdateTime &rArr; LCD_PutNumberOnMS &rArr; LCD_Locatexy &rArr; LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutNumberOnMS
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_DisplayMain
</UL>

<P><STRONG><a name="[82]"></a>LCD_UpdateWeek</STRONG> (ARM, 36 bytes, Stack size 8 bytes, nmrq_lcd240160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_UpdateWeek &rArr; LCD_PutWeek &rArr; LCD_Locatexy &rArr; LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutWeek
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_DisplayMain
</UL>

<P><STRONG><a name="[86]"></a>LCD_UpdateDate</STRONG> (ARM, 168 bytes, Stack size 40 bytes, nmrq_lcd240160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_UpdateDate &rArr; LCD_PutNumberOnData &rArr; LCD_Locatexy &rArr; LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutNumberOnData
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_DisplayMain
</UL>

<P><STRONG><a name="[87]"></a>LCD_UpdateCircumstance</STRONG> (ARM, 208 bytes, Stack size 24 bytes, nmrq_lcd240160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_UpdateCircumstance &rArr; LCD_PutNumberOnData &rArr; LCD_Locatexy &rArr; LCD_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutNumberOnData
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_KeyParse
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_DisplayMain
</UL>

<P><STRONG><a name="[a8]"></a>LCD_UpdateClockSetDate</STRONG> (ARM, 168 bytes, Stack size 40 bytes, nmrq_lcd240160.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutNumberOnData
</UL>

<P><STRONG><a name="[a9]"></a>LCD_UpdateClockSetTime</STRONG> (ARM, 96 bytes, Stack size 24 bytes, nmrq_lcd240160.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutNumberOnData
</UL>

<P><STRONG><a name="[8c]"></a>LCD_DisplayMenuSet</STRONG> (ARM, 384 bytes, Stack size 8 bytes, nmrq_lcd240160.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Displaybmp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_DisplaySelectSet
</UL>

<P><STRONG><a name="[8f]"></a>LCD_DisplayModeSelect</STRONG> (ARM, 384 bytes, Stack size 8 bytes, nmrq_lcd240160.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Displaybmp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_KeyParse
</UL>

<P><STRONG><a name="[aa]"></a>LCD_DisplayTimeSet</STRONG> (ARM, 300 bytes, Stack size 8 bytes, nmrq_lcd240160.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Displaybmp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[ab]"></a>LCD_DisplayPowerOffSelect</STRONG> (ARM, 216 bytes, Stack size 8 bytes, nmrq_lcd240160.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Displaybmp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[8e]"></a>LCD_SelectMenuSetItem</STRONG> (ARM, 812 bytes, Stack size 16 bytes, nmrq_lcd240160.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Displaybmpf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Displaybmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_KeyParse
</UL>

<P><STRONG><a name="[102]"></a>__semihosting$guard</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>malloc</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Init (via Veneer)
</UL>

<P><STRONG><a name="[98]"></a>srand</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetInit (via Veneer)
</UL>

<P><STRONG><a name="[24]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_KeyParse
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_DisplayMain
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_SendStatTbl
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_SendTimingTbl
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myitoa
</UL>

<P><STRONG><a name="[ac]"></a>__rt_heap_descriptor</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via Veneer)
</UL>

<P><STRONG><a name="[10b]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__Heap_Full</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[b0]"></a>__Heap_Broken</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[22]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_escrow
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[b3]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>free</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[10d]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[10e]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[b1]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[b2]"></a>__rt_heap_escrow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, heapauxa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[ae]"></a>__rt_heap_expand</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, heapauxa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __rt_heap_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[26]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[29]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b6]"></a>__sig_exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[b5]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ba]"></a>__default_signal_display</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[c4]"></a>__rt_fp_status_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART0
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetLightInfo
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetTemperatureInfo
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>

<P><STRONG><a name="[12]"></a>IRQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = IRQ_Handler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Exception
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>Timer0_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Timer0_Handler &rArr; Timer0_Exception &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Exception
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(.text)
</UL>
<P><STRONG><a name="[b]"></a>SoftwareInterrupt</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = SoftwareInterrupt &rArr; SWI_Exception
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(vectors)
</UL>
<P><STRONG><a name="[14]"></a>OSIntCtxSw</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Address Reference Count : 2]<UL><LI> os_cpu_a.o(subr)
<LI> irq.o(IRQ)
</UL>
<P><STRONG><a name="[15]"></a>__OSStartHighRdy</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(subr))
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(subr)
</UL>
<P><STRONG><a name="[20]"></a>_fp_init</STRONG> (ARM, 24 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[110]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a]"></a>Undefined</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(vectors)
</UL>
<P><STRONG><a name="[c]"></a>PrefetchAbort</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrefetchAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrefetchAbort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(vectors)
</UL>
<P><STRONG><a name="[d]"></a>DataAbort</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAbort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(vectors)
</UL>
<P><STRONG><a name="[e]"></a>FIQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(vectors)
</UL>
<P><STRONG><a name="[9]"></a>ResetInit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(vectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = ResetInit &rArr; TargetResetInit &rArr; InitialiseUART0
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(vectors)
</UL>
<P><STRONG><a name="[30]"></a>OS_InitTaskIdle</STRONG> (ARM, 68 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[37]"></a>OS_InitEventList</STRONG> (ARM, 80 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[36]"></a>OS_InitTCBList</STRONG> (ARM, 116 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[35]"></a>OS_InitRdyList</STRONG> (ARM, 88 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[34]"></a>OS_InitMisc</STRONG> (ARM, 64 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[be]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[bd]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[bc]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[bf]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[b8]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
